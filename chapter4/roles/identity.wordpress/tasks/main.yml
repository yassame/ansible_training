---
# tasks file for identity.wordpress
- name: Get WordPress checksum
  ansible.builtin.uri:
    url: https://wordpress.org/latest.zip.sha1
    return_content: true
  register: wp_checksum
- name: Download WordPress
  ansible.builtin.get_url:
    url: https://wordpress.org/latest.zip
    dest: /tmp/wordpress.zip
    checksum: "sha1:{{wp_checksum.content}}"
- name: Install unzip
  ansible.builtin.package:
    name: unzip
    state: latest
- name: Extract wordpress latest.zip      
  ansible.builtin.unarchive:
    src: /tmp/wordpress.zip
    dest: /tmp
    copy: no
    creates: /tmp/wordpress/wp-settings.php
- name: Create a directory for wordpress
  ansible.builtin.file:
    path: /var/www/{{ansible_hostname}}
    state: directory
- name: Copy wordpress content
  ansible.builtin.command: 
    cmd: cp -r /tmp/wordpress/. /var/www/{{ansible_hostname}}/
    creates: /var/www/{{ansible_hostname}}/wp-settings.php
#MYSQL USER FOR WORDPRESS WITH PASSWORD bananas
- name: Create a new database with name 'wordpress'
  community.mysql.mysql_db:
    name: wordpress
    state: present
- name: Create a new database user with name 'wordpress' and password 'bananas'
  community.mysql.mysql_user:
    name: wordpress
    host: localhost
    password: bananas
    priv: wordpress.*:ALL
    state: present
    column_case_sensitive: true
- name: Create wp-config
  ansible.builtin.template:
    src: wp-config.php
    dest: /var/www/{{ansible_hostname}}/wp-config.php
#get database imported from backup or dump
- name: Does the database exist?
  ansible.builtin.command: 
    cmd: mysql -u root wordpress -e "SELECT ID FROM wordpress.wp_users LIMIT 1;"
  register: db_exist
  ignore_errors: true
  changed_when: db_exist.rc != 0 
- name: Copy WordPress DB
  ansible.builtin.copy: 
    src: files/wp-database.sql 
    dest: /tmp/wp-database.sql
  when: db_exist.rc > 0
- name: Import WordPress DB
  community.mysql.mysql_db: 
    target: /tmp/wp-database.sql 
    state: import 
    name: wordpress
  when: db_exist.rc > 0
